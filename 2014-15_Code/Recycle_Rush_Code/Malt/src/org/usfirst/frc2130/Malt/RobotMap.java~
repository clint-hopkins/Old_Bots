// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.Malt;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLFMotor;
    public static SpeedController driveTrainLRMotor;
    public static SpeedController driveTrainRFMotor;
    public static SpeedController driveTrainRRMotor;
    public static RobotDrive driveTrainRobotDrive41;
    public static Compressor armsCompressor;
    public static DoubleSolenoid armsLeftSol;
    public static DoubleSolenoid armsRightSol;
    public static Encoder elevatorLocationDetectionEncoder;
    public static DigitalInput elevatorTopProx;
    public static DigitalInput elevatorBottonProx;
    public static SpeedController elevatorElevatorMotor;
    public static DigitalOutput elevatorMiddleProx;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLFMotor = new Victor(1);
        LiveWindow.addActuator("Drive Train", "LFMotor", (Victor) driveTrainLFMotor);
        
        driveTrainLRMotor = new Victor(3);
        LiveWindow.addActuator("Drive Train", "LRMotor", (Victor) driveTrainLRMotor);
        
        driveTrainRFMotor = new Victor(2);
        LiveWindow.addActuator("Drive Train", "RFMotor", (Victor) driveTrainRFMotor);
        
        driveTrainRRMotor = new Victor(4);
        LiveWindow.addActuator("Drive Train", "RRMotor", (Victor) driveTrainRRMotor);
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainLFMotor, driveTrainLRMotor,
              driveTrainRFMotor, driveTrainRRMotor);
        
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);

        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        armsCompressor = new Compressor(0);
        
        
        armsLeftSol = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Arms", "LeftSol", armsLeftSol);
        
        armsRightSol = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Arms", "RightSol", armsRightSol);
        
        elevatorLocationDetectionEncoder = new Encoder(8, 9, false, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "LocationDetectionEncoder", elevatorLocationDetectionEncoder);
        elevatorLocationDetectionEncoder.setDistancePerPulse(1.0);
        elevatorLocationDetectionEncoder.setPIDSourceType(PIDSourceType.kRate);
        elevatorTopProx = new DigitalInput(0);
        LiveWindow.addSensor("Elevator", "TopProx", elevatorTopProx);
        
        elevatorBottonProx = new DigitalInput(1);
        LiveWindow.addSensor("Elevator", "BottonProx", elevatorBottonProx);
        
        elevatorElevatorMotor = new Victor(0);
        LiveWindow.addActuator("Elevator", "ElevatorMotor", (Victor) elevatorElevatorMotor);
        
        elevatorMiddleProx = new DigitalOutput(2);
        LiveWindow.addActuator("Elevator", "MiddleProx", elevatorMiddleProx);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
