// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.Malt.subsystems;

import org.usfirst.frc2130.Malt.Robot;
import org.usfirst.frc2130.Malt.RobotMap;
import org.usfirst.frc2130.Malt.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class Elevator extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder locationDetectionEncoder = RobotMap.elevatorLocationDetectionEncoder;
    private final DigitalInput topProx = RobotMap.elevatorTopProx;
    private final DigitalInput bottonProx = RobotMap.elevatorBottonProx;
    private final SpeedController elevatorMotor = RobotMap.elevatorElevatorMotor;
    private final DigitalOutput middleProx = RobotMap.elevatorMiddleProx;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public Elevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Elevator", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Elevator", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ElevatorControl());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return locationDetectionEncoder.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        elevatorMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
    public boolean topProxReadings() {
    	return !topProx.get();
    }
    
    public boolean bottomProxReadings() {
    	return !bottonProx.get();
    }
    
    public double locationDetectionEncoderReadings() {
    	return locationDetectionEncoder.getDistance();
    }
    
    public void resetLocationDetectionEnoder() {
    	if (bottomProxReadings() == true) {
    		locationDetectionEncoder.reset();
    	}
    }
    
    public void stopElevatorMotor() {
    	elevatorMotor.set(0);
    }
    
    public void setWithSaturate(double desiredOutput) {
    	double limitedOutput = desiredOutput;
    	if (limitedOutput > 0 && topProxReadings() == false && locationDetectionEncoderReadings() >= 1450) {
    		limitedOutput = limitedOutput * 0.4;
    	}
    	if (limitedOutput > 0 && topProxReadings() == true) {
    		limitedOutput = 0;
    	}
    	if (limitedOutput < 0 && bottomProxReadings() == true) {
    		limitedOutput = 0;
    	}
    	
    	elevatorMotor.set(limitedOutput);
    }
    
    public void saturatedJoystick() {
    	if(Robot.oi.operator.getRawAxis(1) <= 0) {
    		double desiredOuput = Robot.oi.operator.getRawAxis(1)*-1;
    		setWithSaturate(desiredOuput);
    	}
    	if(Robot.oi.operator.getRawAxis(1) > 0) {
    		double desiredOuput = Robot.oi.operator.getRawAxis(1)*-0.1;
    		setWithSaturate(desiredOuput);
    	}
    }
}
